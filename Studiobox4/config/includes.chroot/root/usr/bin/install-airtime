#!/bin/bash

# on commence par vérifier que studiobox est connecté à internet
wget -q --tries=20 --timeout=10 http://www.google.com -O /tmp/google.idx &> /dev/null
if [ ! -s /tmp/google.idx ]
then
	zenity --info --text="L'installation d'airtime nécessite une connexion à internet. Connectez-vous à internet ou configurer le proxy (menu Administration)." 2>/dev/null
	exit
	else
	rm /tmp/google.idx
fi

# décompression de l'archive airtime
cd /home/studiobox/Documents/
VERSIONAIRTIME=$(ls .*.tar.gz | grep ^.airtime | cut -d"." -f2-5)
# ménage en cas de réinstallation
if [ -d ".$VERSIONAIRTIME" ]; then
	rm -rf .$VERSIONAIRTIME
fi
tar zxvf .$VERSIONAIRTIME.tar.gz
mv $VERSIONAIRTIME/ .$VERSIONAIRTIME/
cd .$VERSIONAIRTIME

# lancement de l'installation
lxterminal -l -e './install -fpaid' | tee >(zenity --no-cancel --progress --pulsate --auto-close --title="Installation d'Airtime" --text="Installation en cours, merci de patienter..." 2>/dev/null)
zenity --info --text="Une fenêtre de votre navigateur va se lancer pour\\ 
vous permettre de finaliser l'installation.\\
Faites défiler les boîtes de dialogue en laissant\\
les données par défaut." 2>/dev/null
zenity --info --text="Une dernière chose :)
Ne tenez pas compte des demandes concernant des commandes à renseigner 
dans le terminal et du message d'erreur sur la dernière page: ces 
manipulations seront réalisées automatiquement quand vous fermerez votre navigateur..." 2>/dev/null

echo "Configuration et redémarrage de postgresql"
portpostgres=$(netstat -nlp |grep -m1 postgres |cut -d: -f2 |awk '{print $1}')
if [ $portpostgres != 5432 ]; then
sed -i 's/'$portpostgres'/5432/' /etc/postgresql/9.4/main/postgresql.conf
fi
/etc/init.d/postgresql restart

# finalisation de la configuration par l'utilisateur, dans firefox
sleep 2
FIREFOX=$(pgrep firefox)
if [ -n "$FIREFOX" ]; then
	kill $FIREFOX
	sleep 2
fi
firefox http://localhost/login 2>/dev/null | tee >(zenity --no-cancel --progress --pulsate --auto-close --title="Finalisation de l'installation" --text="Lancement du navigateur web" 2>/dev/null)

# redémarrage des services après la fin de la configuration
cd ../../
service airtime-playout start
service airtime-liquidsoap start
service airtime-media-monitor start

# L'install se termine si ce qui précède s'est déroulé sans problème
sleep 3 | tee >(zenity --no-cancel --progress --pulsate --auto-close --title="Vérifications" --text="Vérification de l'installation d'Airtime en cours" 2>/dev/null)
OK=$(pgrep airtime)
if [ -z "$OK" ]; then
	zenity --info --text="Aïe :( \\
Il semblerait qu'il y ait eu un problème durant le processus d'installation." 2>/dev/null
	exit
else

# correction du bug d'airtime 2.5.2 - à surveiller en cas de nouvelle version
mkdir -p /usr/lib/airtime/pypo/bin/liquidsoap_scripts/
ln -s /usr/local/lib/python2.7/dist-packages/airtime_playout-1.0-py2.7.egg/liquidsoap/liquidsoap_auth.py /usr/lib/airtime/pypo/bin/liquidsoap_scripts/liquidsoap_auth.py
service airtime-liquidsoap restart
##la partie ci-dessous fonctionne sur le principe, mais airtime écrase le fichier /etc/airtime/liquidsoap.cfg en redémarrant ses services
##à décommenter quand le problème sera résolu
#	zenity --info --text="Airtime est désormais installé.\\
#Vous pourrez y accéder avec l'identifiant 'admin' et le mot de passe 'admin'\\
#Le script va maintenant rechercher l'existence d'un flux de diffusion, et le cas échéant,\\
#vous proposer de l'utiliser dans Airtime (voir le contenu de la fenêtre de Terminal)." 
#FICHIERDIRECT="$HOME/.Scripts/config/pm"
#POINTMONTAGE=$(cat $FICHIERDIRECT | grep ^pm | cut -d"," -f2)
#PASSPOINTMONTAGE=$(cat $FICHIERDIRECT | grep ^pass | cut -d"," -f2)
#TYPEFLUX=$(cat $FICHIERDIRECT | grep ^pm | cut -d"," -f2 | cut -d"." -f2)
#if [ -n "$POINTMONTAGE" ]; then
#	echo "Le flux de diffusion suivant a déjà été utilisé: "
#	echo "- point de montage: $POINTMONTAGE"
#	echo "- format: $TYPEFLUX"
#	read -p "Souhaitez-vous utiliser ce flux dans Airtime? (oui, non) " reponse
#	if [ "$reponse" = oui ]; then
#		echo "Arrêt des services d'Airtime"
#		service airtime-playout stop
#		service airtime-liquidsoap stop
#		service airtime-media-monitor stop
#		CONFAIRTIME='/etc/airtime/liquidsoap.cfg'
#		echo "Modification du fichier de configuration d'airtime $CONFAIRTIME"
#		echo "- point de montage: $POINTMONTAGE"
#		echo "- mot de passe: $PASSPOINTMONTAGE"
#		echo "- format: $TYPEFLUX"
#		sed -i "s/^s1_mount.*$/s1_mount = $POINTMONTAGE/" $CONFAIRTIME
#		sed -i "s/^s1_pass.*$/s1_pass = $PASSPOINTMONTAGE/" $CONFAIRTIME
#		sed -i "s/^s1_host.*$/s1_host = \"webradio.ac-versailles.fr\"/" $CONFAIRTIME
#		sed -i "s/^s1_type.*$/s1_type = \"$TYPEFLUX\"/" $CONFAIRTIME
#		sed -i "s/^master_live_stream_port.*$/master_live_stream_port = 8001/" $CONFAIRTIME
#		sed -i "s/^master_live_stream_mp.*$/master_live_stream_mp = \"webradio.ogg\"/" $CONFAIRTIME
#	else
#		sed -i "s/^master_live_stream_port.*$/master_live_stream_port = 8001/" $CONFAIRTIME
#		sed -i "s/^master_live_stream_mp.*$/master_live_stream_mp = \"webradio.ogg\"/" $CONFAIRTIME
#	fi
##	echo "Redémarrage des services d'Airtime"
#	service airtime-playout start
#	service airtime-liquidsoap start
#	service airtime-media-monitor start
#else
#	echo "Pas de flux de diffusion repéré. Suite et fin de la configuration."
#	sleep 5	
#fi

# changement des menus d'openbox
rm .config/openbox/menu.xml
mv .config/openbox/menu2.xml .config/openbox/menu.xml
openbox --restart
killall conky
sleep 4
while [ -z $CONKY ]; do
	CONKY=$(pgrep conky)
	sleep 2
	conky &
	sleep 1
done

# accessibilité de la doc
cp $HOME/Documents/.memento_airtime.pdf $HOME/Documents/memento_airtime.pdf
cp $HOME/Documents/.memento_airtime.odt $HOME/Documents/memento_airtime.odt
zenity --question --title "Fin de l'installation" --text "L'installation s'est bien déroulée et est désormais terminée: pour se connecter à Airtime,
ouvrez un navigateur web à l'adresse http://localhost/login (l'identifiant par défaut est 'admin' et le mot de passe est 'admin').
Nous vous conseillons fortement de procéder à la configuration des flux de diffusion (procédure décrite dans la documentation).
Souhaitez-vous lire dès maintenant la documentation?" 2>/dev/null
	if [ $? = 0 ]; then
		evince 'Documents/.memento_airtime.pdf'
	fi
fi
